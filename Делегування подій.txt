Делегування подій


const container = document.querySelector('.js-container')

container.addEventListener('click', onClick);................................................подія прослухана на контейнері

function onClick(evt) {
   
    // console.log(evt.currentTarget);
console.log(evt.target); ........................................ показую на чому відбулась подія  Click    
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Фільтр подій


const container = document.querySelector('.js-container')

container.addEventListener('click', onClick);

function onClick(evt) {
   if (evt.target.nodeName!=='BUTTON') {
       return;
   }

    console.log(evt.target.nodeName);.................................................................evt.target.nodeName тип елемента
console.log(evt.target.textContent);    
}

const addBtn = document.querySelector('.js-add-btn'); ........................................ знаходимо кнопку "Додати кнопку"
addBtn.addEventListener('click',onAddBtnClick); .............................................. відслуховуємо подію 'Click' на кнопці  "Додати кнопку"

let labelCounter = 6;
function onAddBtnClick() {
    const btn = document.createElement('button'); ........................створюємо кнопку
    btn.textContent = `Кнопка${labelCounter}`;...................................... прописуємо назву кнопки
    container.appendChild(btn);................................................. додаємо останню дитину в контейнер
    labelCounter += 1;......................................................... збільшуємо кількість кнопок на 1ж
    
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const tagsContainer = document.querySelector('.js-tags');............................... знаходимо наш контайнер


tagsContainer.addEventListener('click', onTagsconteinerclick); ................. вішаємо на контейнер зчитувач подій Click

function onTagsconteinerclick(e) {
    if (e.target.nodeName!=='BUTTON') {
        return..................................... виконуємо функцію якщо клікнули по кнопці
    }
    const currentActiveBtn = document.querySelector('.tags__btn--active'); ........................ знаходимо об"єкт з класом активної кнопки
    
 if (currentActiveBtn) {
    currentActiveBtn.classList.remove('tags__btn--active');
 }.........................................................................якщо знайдено об"экт з класом активної кнопки - забираємо з цієї кнопки "клас активної кнопки"
  
    e.target.classList.add('tags__btn--active'); .................. додаємо клас активної кнопки до об"єкту, по якому клацнули
    console.log(e.target.textContent);
}
////////////////////////////////////////////////////////////////////////////////////////////////

const tagsContainer = document.querySelector('.js-tags');............................ знаходимо контейнер
const selectedTags = new Set();..............................................................................створюємо новий масив унікальних символів
 
tagsContainer.addEventListener('click', onTagsconteinerclick); . слухаємо подію click на контейнері

function onTagsconteinerclick(e) {
    if (e.target.nodeName!=='BUTTON') {
        return
    }............................................ виконуємо функцію якщо об"єкт = кнопка
    const btn = e.target; ........................місце , куди клікнули
    const tag = btn.dataset.value;...............значення дата сета місця де був клік
    const isActive = btn.classList.contains('tags__btn--active');.....................знаходимо кнопку з класом 'tags__btn--active'
    
    console.log(btn.classList.contains('tags__btn--active')); 

  
   
    if (isActive) {
        selectedTags.delete(tag);
          }................................. якщо кнопка з класом активності є, видаляємо її із сета.
   
    else { 
        selectedTags.add(tag);    
    }............................................якщо кнопка з класом активності немає, додаємо її в  сета.
     
     btn.classList.toggle('tags__btn--active'); 
     console.log(selectedTags);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////



contains......................чи містить клас
e.target.classList.contains('color-swatch')

/////////////////////////////////////////////////////////////////////

parentElement................................... батьківський елемент

 // const parentColorCard = swatchEl.parentNode;

///////////////////////////////////////////////////////////////////////

const parentColorCard = swatchEl.closest('.color-card');................. closest шукає  для swatchEl наблищого предка з потрібним селектором  .color-card

//////////////////////////////////////////////////////////////////////////////////////////////////////////////


const colors = [
    {hex: '#f44336', rgb: '244,67,54'},
    {hex: '#e91e63', rgb: '233,30,99'},
    {hex: '#9c27b0', rgb: '156,39,176'},
    {hex: '#673ab7', rgb: '103,58,183'},
    {hex: '#3f51b5', rgb: '63,81,181'},
    {hex: '#2196f3', rgb: '33,150,243'},
    {hex: '#00bcd4', rgb: '0,188,212'},
    {hex: '#009688', rgb: '0,150,136'},
    {hex: '#4caf50', rgb: '76,175,80'},
    {hex: '#ffeb3b', rgb: '255,235,59'},
    {hex: '#ff9800', rgb: '255,152,0'},
    {hex: '#795548', rgb: '121,85,72'},
    {hex: '#607d8b', rgb: '96,125,139'},
];

const paletteContainer = document.querySelector('.js-palette');
// Створимо розмітку
function createColorCardsMarcup(masiv) {

     return masiv.map(({ hex, rgb }) => {   
        return `
    <div class="color-card">
        <div
                class="color-swatch"
                data-hex="${hex}"
                data-rgb="${rgb}"
                style="background-color:${hex}"
        ></div>

        <div class="color-meta">
                <p>HEX:${hex}</p>
                <p>RGB:${rgb}</p>
        </div>
    </div>
    `;
                   
    })
        .join('');
  
}
const cardsMarkup = createColorCardsMarcup(colors);


paletteContainer.insertAdjacentHTML("beforeend", cardsMarkup);
//////////////////////////////////////////////////////////////////////////////////


paletteContainer.addEventListener('click', onPaletteContainerclick);

function onPaletteContainerclick(e) {
    const currentDiv = document.querySelector('.color-swatch')
    if (!e.target.classList.contains('color-swatch')) {
        return;
    }
    const swatchEl = e.target;
    // console.dir(swatchEl);
    // const parentColorCard = swatchEl.parentNode;
    
    const parentColorCard = swatchEl.closest('.color-card');
    const currentParentColorCard = document.querySelector('.color-card.is-active');
    if (currentParentColorCard) {
        currentParentColorCard.classList.remove('is-active');
    }
    parentColorCard.classList.add('is-active');
    
    // console.dir(e.target.dataset.hex);
    document.body.style.backgroundColor = swatchEl.dataset.hex; .......... стилізуємо body під знайдений колір
    
    
}
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

const colors = [
    {hex: '#f44336', rgb: '244,67,54'},
    {hex: '#e91e63', rgb: '233,30,99'},
    {hex: '#9c27b0', rgb: '156,39,176'},
    {hex: '#673ab7', rgb: '103,58,183'},
    {hex: '#3f51b5', rgb: '63,81,181'},
    {hex: '#2196f3', rgb: '33,150,243'},
    {hex: '#00bcd4', rgb: '0,188,212'},
    {hex: '#009688', rgb: '0,150,136'},
    {hex: '#4caf50', rgb: '76,175,80'},
    {hex: '#ffeb3b', rgb: '255,235,59'},
    {hex: '#ff9800', rgb: '255,152,0'},
    {hex: '#795548', rgb: '121,85,72'},
    {hex: '#607d8b', rgb: '96,125,139'},
];

const paletteContainer = document.querySelector('.js-palette');
// Створимо розмітку
function createColorCardsMarcup(masiv) {

     return masiv.map(({ hex, rgb }) => {   
        return `
    <div class="color-card">
        <div
                class="color-swatch"
                data-hex="${hex}"
                data-rgb="${rgb}"
                style="background-color:${hex}"
        ></div>

        <div class="color-meta">
                <p>HEX:${hex}</p>
                <p>RGB:${rgb}</p>
        </div>
    </div>
    `;
                   
    })
        .join('');
  
}
const cardsMarkup = createColorCardsMarcup(colors);

paletteContainer.insertAdjacentHTML("beforeend", cardsMarkup);
//////////////////////////////////////////////////////////////////////////////////

paletteContainer.addEventListener('click', onPaletteContainerclick);

function onPaletteContainerclick(e) {
    const isColorSwatchEl = e.target.classList.contains('color-swatch');

        if (!isColorSwatchEl) {
            return;
        }

    const swatchEl = e.target;
    const parentColorCard = swatchEl.closest('.color-card');
            
    removeActiveCardClass();
    addActiveCardClass(parentColorCard);
    setBodyBgColor(swatchEl.dataset.hex); 
}

function setBodyBgColor(color) {
 document.body.style.backgroundColor = color;  
}

function removeActiveCardClass() {
    const currentActiveCard = document.querySelector('.color-card.is-active');
    
    if (currentActiveCard) {
        currentActiveCard.classList.remove('is-active');
    }  
}

function addActiveCardClass(card) {
  card.classList.add('is-active');   
}



















